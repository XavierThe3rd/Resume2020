    const values = () => {
      let array = document.getElementsByClassName('client')
      for (let i = 0; i < array.length; i++) {
        let parts = array[i]
        let comp = window.getComputedStyle(parts)
        let h = parseFloat(comp.getPropertyValue('height'))
        let pt = parseFloat(comp.getPropertyValue('padding-top'))
        let pb = parseFloat(comp.getPropertyValue('padding-bottom'))
        let mt = parseFloat(comp.getPropertyValue('margin-top'))
        let mb = parseFloat(comp.getPropertyValue('margin-bottom'))
        let sum = h + pt + pb + mt + mb
        return sum
      }
    }

      /*let [height, setHeight] = useState(0)
  let [scroll, setScroll] = useState(10000)
  let [init, setInit] = useState(false)

  const values = () => {
    let array = document.getElementsByClassName(`${block}_holder`)
    let elements = Array.from(array)
    return elements.map(hit => {
      let comp = window.getComputedStyle(hit)
      return parseFloat(comp.getPropertyValue('height'))
    })
  }

  const callload = useCallback(() => {
    let total = values().reduce((a, b) => a + b, 0)
    setHeight(total)
    setTimeout(() => setInit(true), 500)
  }, [])

  const callscroll = useCallback(() => {
    let st = window.pageYOffset
    if (window.pageYOffset > 1000) {
      init = true ? setScroll(st) : setScroll(10000)
    }
  }, [scroll, setScroll])
  handleLoad(callload)
  handleScroll(callscroll)*/
    console.log(values())